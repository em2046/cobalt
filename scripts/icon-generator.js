const fsPromises = require('fs').promises;
const path = require('path');

const endOfLine = `
`;
const commaAndEndOfLine = `,
`;

let iconPath = './src/assets/icon';
let generatedPath = './src/components/icon';
generatedName = 'icon-sheet-generated.ts';

function camelize(str) {
  return str.replace(/-(\w)/g, (match, chr) => {
    return chr ? chr.toUpperCase() : '';
  });
}

function pascalize(str) {
  let camelized = camelize(str);
  return camelized.substring(0, 1).toUpperCase() + camelized.substring(1);
}

let absoluteSrcPath = path.resolve(iconPath);
let absoluteDistFilePath = path.resolve(generatedPath);

let importPath = path.relative(absoluteDistFilePath, absoluteSrcPath);

importPath = importPath.split(path.sep).join('/');

let fileList = [];
let importList = [];
let exportList = [];
let sheetList = [];
let ListList = [];

const IMPORT_TEMPLATE = `import { ReactComponent as SVGR%REACT_COMPONENT_NAME% } from '%PATH%';`;
const EXPORT_TEMPLATE = `  ['%BASENAME%']: SVGR;`;
const SHEET_TEMPLATE = `  ['%BASENAME%']: SVGR%REACT_COMPONENT_NAME%`;
const LIST_TEMPLATE = `  '%BASENAME%'`;

let date = new Date().toLocaleString();

let template = `/**
 * WARNING
 * THIS FILE WAS AUTO GENERATED FROM Node.js [/scripts/icon-generator.js]
 * DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
 * Update Time: ${date}
 **/

import { SVGProps, FunctionComponent } from 'react';

%IMPORT_AREA%

type SVGR = FunctionComponent<SVGProps<SVGSVGElement>>;

export interface Sheet {
%EXPORT_AREA%
}

export type IconType = keyof Sheet;

export let iconSheet: Sheet = {
%SHEET_AREA%
};

export let iconList: IconType[] = [
%LIST_AREA%
];
`;

async function iconGenerator() {
  let fileHandle;
  try {
    fileHandle = await fsPromises.readdir(absoluteSrcPath);

    fileHandle.map(filename => {
      let extname = path.extname(filename);
      let basename = path.basename(filename, extname);
      let pascalCaseName = pascalize(basename);

      fileList.push({
        filename,
        basename,
        pascalCaseName,
        extname
      });
    });
  } catch (e) {
    console.error(e);
  }

  fileList.sort((firstFile,secondFile)=>{
    return firstFile.basename.localeCompare(secondFile.basename)
  }).forEach(file => {
    let { basename, pascalCaseName, filename } = file;

    let importHasName = IMPORT_TEMPLATE.replace(
      '%REACT_COMPONENT_NAME%',
      pascalCaseName
    );
    let importHasPath = importHasName.replace(
      '%PATH%',
      path.posix.join(importPath, filename)
    );
    importList.push(importHasPath);

    let exportHasBasename = EXPORT_TEMPLATE.replace('%BASENAME%', basename);
    exportList.push(exportHasBasename);

    let sheetHasName = SHEET_TEMPLATE.replace(
      '%REACT_COMPONENT_NAME%',
      pascalCaseName
    );
    let sheetHasBasename = sheetHasName.replace('%BASENAME%', basename);
    sheetList.push(sheetHasBasename);

    ListList.push(LIST_TEMPLATE.replace('%BASENAME%', basename));
  });

  template = template.replace('%IMPORT_AREA%', importList.join(endOfLine));
  template = template.replace('%EXPORT_AREA%', exportList.join(endOfLine));
  template = template.replace(
    '%SHEET_AREA%',
    sheetList.join(commaAndEndOfLine)
  );
  template = template.replace('%LIST_AREA%', ListList.join(commaAndEndOfLine));

  fsPromises.writeFile(
    path.join(absoluteDistFilePath, generatedName),
    template
  );
}

iconGenerator();
